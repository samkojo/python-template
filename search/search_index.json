{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Template Python Projeto para template python. Overview A ideia \u00e9 listarmos todas ferramentas que ser\u00e3o utilizadas, bem como os detalhes de instala\u00e7\u00e3o e uso. Iniciando projeto passo a passo EditorConfig Para padronizarmos estilo de codifica\u00e7\u00e3o de arquivos. Como exemplo de configuracao do .editorconfig : # EditorConfig is awesome: https://EditorConfig.org # Wiki: https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties # Referencias: # https://github.com/python/cpython/blob/main/.editorconfig # https://github.com/django/django/blob/main/.editorconfig # https://github.com/NLeSC/python-template/blob/main/.editorconfig # https://github.com/trailofbits/pip-audit/blob/main/.editorconfig root = true # Configuracao geral para todos arquivos com identacao menor de 2 espacos # removento espacos em branco no final da linha # sempre deixando um linha em branco no final do arquivo [*] end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true indent_style = space indent_size = 2 # Para arquivos Python deixei o padrao PEP8 de identacao com 4 espacos [*.py] indent_style = space indent_size = 4 [Makefile] indent_style = tab gitignore Para definirmos arquivos que n\u00e3o devem ser comitados por padrao. Como base podemos utilizar a gera\u00e7\u00e3o do .gitignore desse gerador adicionando como parametro python por exemplo. Pyenv Para gerenciar vers\u00f5es de python. Necess\u00e1rio a instala\u00e7\u00e3o para utilizacao Primeiro instalamos a vers\u00e3o que queremos utilizar, como exemplo Python 3.9.12 pyenv install 3.9.12 Na raiz do projeto podemos definir que iremos utilizar essa vers\u00e3o pyenv local 3.9.12 Poetry Nosso gerenciador de pacotes e dependencias. Necess\u00e1rio a instala\u00e7\u00e3o para utilizacao Iniciamos o poetry no nosso projeto poetry init -n Para respeitarmos a vers\u00e3o que definimos no pyenv conferir e corrigir se necess\u00e1rio a vers\u00e3o do python no arquivo pyproject.toml e trecho [tool.poetry.dependencies] . Por exemplo: [tool.poetry.dependencies] python = \"^3.9.12\" Instalamos para iniciar o ambiente virtual poetry install Acessamos o shell poetry, para podemos utilizar o projeto poetry shell Lint Como formatadores de codigo podemos utilizar o blue e isort. Para instalar: poetry add blue -D poetry add isort -D Como analise de codigo podemos utilizar o prospector com mypy. Para instalar: poetry add prospector -D poetry add mypy -D Verificar problema de seguranca comuns no codigo. Para insta\u00e7\u00e3o: poetry add bandit -D Podemos configurar o prospector com um arquivo prospector.yaml na raiz do projeto. Como exemplo: strictness: high doc-warnings: false test-warnings: false autodetect: false member-warnings: false max-line-length: 79 mypy: run: true options: ignore-missing-imports: true follow-imports: skip bandit: run: true Pytest Ferramenta para teste. Para instala\u00e7\u00e3o: poetry add pytest -D Safety Verificador de vunerabilidades de dependencias. Para instala\u00e7\u00e3o: poetry add safety -D Mkdocs Ferramenta para documenta\u00e7\u00e3o Para instala\u00e7\u00e3o: poetry add mkdocs -D Para iniciar a documenta\u00e7\u00e3o com mkdocs no projeto: mkdocs new . Para instalacao extensoes e temas utilizados nesse exemplo: poetry add pymdown-extensions -D poetry add mkdocs-material -D Ativamos a extensao atraves do arquivo mkdocs.yml como exemplo: site_name: Template Python theme: name: material palette: - scheme: default primary: blue grey toggle: icon: material/weather-night name: Modo noturno - scheme: slate primary: indigo toggle: icon: material/weather-sunny name: Modo claro markdown_extensions: - pymdownx.tasklist # Lista de tarefas - pymdownx.emoji # Emojis - pymdownx.mark - pymdownx.tilde - pymdownx.highlight Makefile Para facilitarmos no desenvolvimento do projeto, criamos scripts para organizarmos algumas tarefas comuns. Como exemplo temos o Makefile com base nas ferramentas apresentadas: .PHONY: install install: @poetry install .PHONY: format format: @blue . @isort . .PHONY: lint lint: @blue --check . @isort --check . @prospector .PHONY: test test: @pytest . -v .PHONY: check check: @safety check","title":"Template Python"},{"location":"#template-python","text":"Projeto para template python.","title":"Template Python"},{"location":"#overview","text":"A ideia \u00e9 listarmos todas ferramentas que ser\u00e3o utilizadas, bem como os detalhes de instala\u00e7\u00e3o e uso.","title":"Overview"},{"location":"#iniciando-projeto-passo-a-passo","text":"","title":"Iniciando projeto passo a passo"},{"location":"#editorconfig","text":"Para padronizarmos estilo de codifica\u00e7\u00e3o de arquivos. Como exemplo de configuracao do .editorconfig : # EditorConfig is awesome: https://EditorConfig.org # Wiki: https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties # Referencias: # https://github.com/python/cpython/blob/main/.editorconfig # https://github.com/django/django/blob/main/.editorconfig # https://github.com/NLeSC/python-template/blob/main/.editorconfig # https://github.com/trailofbits/pip-audit/blob/main/.editorconfig root = true # Configuracao geral para todos arquivos com identacao menor de 2 espacos # removento espacos em branco no final da linha # sempre deixando um linha em branco no final do arquivo [*] end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true indent_style = space indent_size = 2 # Para arquivos Python deixei o padrao PEP8 de identacao com 4 espacos [*.py] indent_style = space indent_size = 4 [Makefile] indent_style = tab","title":"EditorConfig"},{"location":"#gitignore","text":"Para definirmos arquivos que n\u00e3o devem ser comitados por padrao. Como base podemos utilizar a gera\u00e7\u00e3o do .gitignore desse gerador adicionando como parametro python por exemplo.","title":"gitignore"},{"location":"#pyenv","text":"Para gerenciar vers\u00f5es de python. Necess\u00e1rio a instala\u00e7\u00e3o para utilizacao Primeiro instalamos a vers\u00e3o que queremos utilizar, como exemplo Python 3.9.12 pyenv install 3.9.12 Na raiz do projeto podemos definir que iremos utilizar essa vers\u00e3o pyenv local 3.9.12","title":"Pyenv"},{"location":"#poetry","text":"Nosso gerenciador de pacotes e dependencias. Necess\u00e1rio a instala\u00e7\u00e3o para utilizacao Iniciamos o poetry no nosso projeto poetry init -n Para respeitarmos a vers\u00e3o que definimos no pyenv conferir e corrigir se necess\u00e1rio a vers\u00e3o do python no arquivo pyproject.toml e trecho [tool.poetry.dependencies] . Por exemplo: [tool.poetry.dependencies] python = \"^3.9.12\" Instalamos para iniciar o ambiente virtual poetry install Acessamos o shell poetry, para podemos utilizar o projeto poetry shell","title":"Poetry"},{"location":"#lint","text":"Como formatadores de codigo podemos utilizar o blue e isort. Para instalar: poetry add blue -D poetry add isort -D Como analise de codigo podemos utilizar o prospector com mypy. Para instalar: poetry add prospector -D poetry add mypy -D Verificar problema de seguranca comuns no codigo. Para insta\u00e7\u00e3o: poetry add bandit -D Podemos configurar o prospector com um arquivo prospector.yaml na raiz do projeto. Como exemplo: strictness: high doc-warnings: false test-warnings: false autodetect: false member-warnings: false max-line-length: 79 mypy: run: true options: ignore-missing-imports: true follow-imports: skip bandit: run: true","title":"Lint"},{"location":"#pytest","text":"Ferramenta para teste. Para instala\u00e7\u00e3o: poetry add pytest -D","title":"Pytest"},{"location":"#safety","text":"Verificador de vunerabilidades de dependencias. Para instala\u00e7\u00e3o: poetry add safety -D","title":"Safety"},{"location":"#mkdocs","text":"Ferramenta para documenta\u00e7\u00e3o Para instala\u00e7\u00e3o: poetry add mkdocs -D Para iniciar a documenta\u00e7\u00e3o com mkdocs no projeto: mkdocs new . Para instalacao extensoes e temas utilizados nesse exemplo: poetry add pymdown-extensions -D poetry add mkdocs-material -D Ativamos a extensao atraves do arquivo mkdocs.yml como exemplo: site_name: Template Python theme: name: material palette: - scheme: default primary: blue grey toggle: icon: material/weather-night name: Modo noturno - scheme: slate primary: indigo toggle: icon: material/weather-sunny name: Modo claro markdown_extensions: - pymdownx.tasklist # Lista de tarefas - pymdownx.emoji # Emojis - pymdownx.mark - pymdownx.tilde - pymdownx.highlight","title":"Mkdocs"},{"location":"#makefile","text":"Para facilitarmos no desenvolvimento do projeto, criamos scripts para organizarmos algumas tarefas comuns. Como exemplo temos o Makefile com base nas ferramentas apresentadas: .PHONY: install install: @poetry install .PHONY: format format: @blue . @isort . .PHONY: lint lint: @blue --check . @isort --check . @prospector .PHONY: test test: @pytest . -v .PHONY: check check: @safety check","title":"Makefile"},{"location":"tools/poetry/","text":"Poetry Gerenciador de dependencia moderno que facilita o desenvolvimento. Insta\u00e7\u00e3o Como instalar Configura\u00e7\u00f5es Para utilizar o ambiente virtual na pasta .venv na raiz do projeto: poetry config virtualenvs.in-project true --local Inicializa\u00e7\u00e3o Para inicializar num projeto ja existente # Inicializa e faz as perguntas iniciais de configura\u00e7\u00e3o poetry init ## ou # Inicializa com as configura\u00e7\u00f5es default poetry init -n Para inicializar novo projeto com poetry poetry new [nome_do_projeto] Com o poetry ja iniciado no projeto. Ativar o ambiente virtual no shell poetry shell Instalar as dependencias no ambiente virtual do projeto poetry install Utiliza\u00e7\u00e3o Adicionar uma dependencia poetry add [dependencia] # -D [dependencia de desenvolvimento] Adicionar uma dependencia de desenvolvimento (linters, tests, ...) poetry add [dependencia] -D Remover um dependencia poetry remove [dependencia] -D","title":"Poetry"},{"location":"tools/poetry/#poetry","text":"Gerenciador de dependencia moderno que facilita o desenvolvimento.","title":"Poetry"},{"location":"tools/poetry/#instacao","text":"Como instalar","title":"Insta\u00e7\u00e3o"},{"location":"tools/poetry/#configuracoes","text":"Para utilizar o ambiente virtual na pasta .venv na raiz do projeto: poetry config virtualenvs.in-project true --local","title":"Configura\u00e7\u00f5es"},{"location":"tools/poetry/#inicializacao","text":"Para inicializar num projeto ja existente # Inicializa e faz as perguntas iniciais de configura\u00e7\u00e3o poetry init ## ou # Inicializa com as configura\u00e7\u00f5es default poetry init -n Para inicializar novo projeto com poetry poetry new [nome_do_projeto] Com o poetry ja iniciado no projeto. Ativar o ambiente virtual no shell poetry shell Instalar as dependencias no ambiente virtual do projeto poetry install","title":"Inicializa\u00e7\u00e3o"},{"location":"tools/poetry/#utilizacao","text":"Adicionar uma dependencia poetry add [dependencia] # -D [dependencia de desenvolvimento] Adicionar uma dependencia de desenvolvimento (linters, tests, ...) poetry add [dependencia] -D Remover um dependencia poetry remove [dependencia] -D","title":"Utiliza\u00e7\u00e3o"}]}